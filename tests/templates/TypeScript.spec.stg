/* eslint-disable max-len, @typescript-eslint/no-unused-vars */

import * as antlr from "antlr4ng";

import { <lexerName> } from "./<lexerName>.js";
<if(parserName)>
import { <parserName> } from "./<parserName>.js";
<if(useListener)>
import { <grammarName>Listener } from "./<grammarName>Listener.js";
<endif>
<if(useVisitor)>
import { <grammarName>Visitor } from "./<grammarName>Visitor.js";
<endif>

class TreeShapeListener implements antlr.ParseTreeListener {
    public enterEveryRule(ctx: antlr.ParserRuleContext) {
        for (let i = 0; i \< ctx.getChildCount(); i++) {
            const child = ctx.getChild(i) as antlr.RuleContext;
            const parent = child.parent;
            if (parent!.ruleContext !== ctx || !(parent instanceof antlr.RuleContext)) {
                throw new Error("Invalid parse tree shape detected.");
            }
        }
    }

    public visitTerminal(node: antlr.TerminalNode): void { }
    public visitErrorNode(node: antlr.ErrorNode): void { }
    public exitEveryRule(ctx: antlr.ParserRuleContext): void { }
}
<endif>

let capturedOutput = "";
let capturedErrors = "";

class CaptureErrorListener extends antlr.BaseErrorListener {
    public override syntaxError\<T extends antlr.ATNSimulator>(recognizer: antlr.Recognizer\<T> | null,
        offendingSymbol: unknown, line: number, charPositionInLine: number, msg: string | null,
        _e: antlr.RecognitionException | null): void {
        capturedErrors += "line " + line + ":" + charPositionInLine + " " + msg + "\n";
    }
}

const main = (text: string): void => {
    const input = antlr.CharStreams.fromString(text);
    const lexer = new <lexerName>(input);
    lexer.removeErrorListeners();
    lexer.addErrorListener(new CaptureErrorListener());

    const stream = new antlr.CommonTokenStream(lexer);

<if(parserName)>
    const parser = new <parserName>(stream);
    parser.removeErrorListeners();
    parser.addErrorListener(new CaptureErrorListener());

<if(showDiagnosticErrors)>
    parser.addErrorListener(new antlr.DiagnosticErrorListener());
<endif>
    parser.printer = {
        println: (s: string): void => { capturedOutput += s + "\n"; },
        print: (s: string): void => { capturedOutput += s; },
    };
    parser.interpreter.predictionMode = antlr.PredictionMode.<predictionMode>;
<if(!buildParseTree)>
    parser.buildParseTrees = false;
<endif>
    const tree = parser.<parserStartRuleName>();
    antlr.ParseTreeWalker.DEFAULT.walk(new TreeShapeListener(), tree);
<else>
    stream.fill();
    const tokens = stream.getTokens();
    for (const token of tokens) {
        global.antlrTestWriteLn(token.toString());
    }
<if(showDFA)>
    global.antlrTestWrite(lexer.interpreter.decisionToDFA[antlr.Lexer.DEFAULT_MODE].toLexerString());
<endif>
<endif>
};

describe("<testName>", () => {
    <testAnnotation>("run", () => {
        global.antlrTestWrite = (s: string): void => { capturedOutput += s; };
        global.antlrTestWriteLn = (s: string): void => { capturedOutput += s + "\n"; };

        const input = "<input>";
        const expectedOutput = "<expectedOutput>";
        const expectedErrors = "<expectedErrors>";
        main(input);
        expect(capturedOutput).toEqual(expectedOutput);
        expect(capturedErrors).toEqual(expectedErrors);

        global.antlrTestWrite = undefined;
        global.antlrTestWriteLn = undefined;
    });
});
