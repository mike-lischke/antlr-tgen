import { readFileSync } from "fs";
import {
	CharStreams,
	CommonTokenStream,
	DiagnosticErrorListener,
	Lexer,
	ParseTreeListener,
	ParseTreeWalker,
	RuleContext,
	ParserRuleContext,
	PredictionMode,
    TerminalNode,
    ErrorNode
} from 'antlr4ng';
import { <lexerName> } from './<lexerName>.js';
<if(parserName)>
import { <parserName> } from './<parserName>.js';
<if(useListener)>
import { <grammarName>Listener } from './<grammarName>Listener.js';
<endif>
<if(useVisitor)>
import { <grammarName>Visitor } from './<grammarName>Visitor.js';
<endif>

class TreeShapeListener implements ParseTreeListener {
    public enterEveryRule(ctx: ParserRuleContext) {
        for (let i = 0; i \< ctx.getChildCount(); i++) {
            const child = ctx.getChild(i) as RuleContext;
            const parent = child.parent;
            if (parent!.ruleContext !== ctx || !(parent instanceof RuleContext)) {
                throw `Invalid parse tree shape detected.`;
            }
        }
    }

    public visitTerminal(node: TerminalNode): void { }
	public visitErrorNode(node: ErrorNode): void { }
	public exitEveryRule(ctx: ParserRuleContext): void { }
}
<endif>

export const main = (argv: string[]): void => {
    const text = readFileSync(argv[2], { encoding: "utf-8" });
    const input = CharStreams.fromString(text);
    const lexer = new <lexerName>(input);
    const stream = new CommonTokenStream(lexer);
<if(parserName)>
    const parser = new <parserName>(stream);
<if(showDiagnosticErrors)>
    parser.addErrorListener(new DiagnosticErrorListener());
<endif>
    parser.printer = {
        println : function(s: string) { console.log(s); },
        print : function(s: string) { process.stdout.write(s); }
    };
    parser.interpreter.predictionMode = PredictionMode.<predictionMode>;
<if(!buildParseTree)>
    parser.buildParseTrees = false;
<endif>
    const tree = parser.<parserStartRuleName>();
    ParseTreeWalker.DEFAULT.walk(new TreeShapeListener(), tree);
<else>
    stream.fill();
    const tokens = stream.getTokens();
    for(let i=0; i\<tokens.length; i++) {
        console.log(tokens[i].toString());
    }
<if(showDFA)>
    process.stdout.write(lexer.interpreter.decisionToDFA[Lexer.DEFAULT_MODE].toLexerString());
<endif>
<endif>
}

<if(!hideMainInvocation)>
main(process.argv);
<endif>
